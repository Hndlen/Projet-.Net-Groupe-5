// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projet.BDD;

#nullable disable

namespace Projet.BDD.Migrations
{
    [DbContext(typeof(MyDbContextConsole))]
    partial class MyDbContextConsoleModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projet.BDD.Entities.Console.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodePostal = 94000,
                            Complement = "",
                            Libelle = "12, rue des Oliviers",
                            Ville = "CRETEIL"
                        },
                        new
                        {
                            Id = 3,
                            CodePostal = 94300,
                            Complement = "Etage 2",
                            Libelle = "10, rue des Olivies",
                            Ville = "VINCENNES"
                        },
                        new
                        {
                            Id = 5,
                            CodePostal = 94120,
                            Complement = "",
                            Libelle = "15, rue de la République",
                            Ville = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Id = 7,
                            CodePostal = 92100,
                            Complement = "",
                            Libelle = "25, rue de la Paix",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 9,
                            CodePostal = 93500,
                            Complement = "",
                            Libelle = "3, avenue des Parcs",
                            Ville = "ROISSY EN France"
                        },
                        new
                        {
                            Id = 11,
                            CodePostal = 93200,
                            Complement = "",
                            Libelle = "3, rue Lecourbe",
                            Ville = "BAGNOLET"
                        },
                        new
                        {
                            Id = 2,
                            CodePostal = 94120,
                            Complement = "Digicode 1432",
                            Libelle = "125, rue LaFayette",
                            Ville = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Id = 4,
                            CodePostal = 93500,
                            Complement = "",
                            Libelle = "36, quai des Orfèvres",
                            Ville = "ROISSY EN FRANCE"
                        },
                        new
                        {
                            Id = 12,
                            CodePostal = 92060,
                            Complement = "",
                            Libelle = "10, esplanade de la Défense",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 6,
                            CodePostal = 75002,
                            Complement = "Bat. C",
                            Libelle = "32, rue E. Renan",
                            Ville = "PARIS"
                        },
                        new
                        {
                            Id = 8,
                            CodePostal = 92100,
                            Complement = "",
                            Libelle = "23, av P. Valery",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 13,
                            CodePostal = 92060,
                            Complement = "Tour Franklin",
                            Libelle = "24, esplanade de la Défense",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 10,
                            CodePostal = 75003,
                            Complement = "Fond de Cour",
                            Libelle = "15, Place de la Bastille",
                            Ville = "PARIS"
                        },
                        new
                        {
                            Id = 14,
                            CodePostal = 75008,
                            Complement = "",
                            Libelle = "10, rue de la Paix",
                            Ville = "PARIS"
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CarteBancaire", b =>
                {
                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompteCarteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Numero");

                    b.HasIndex("CompteCarteId");

                    b.ToTable("CartesBancaire");

                    b.HasData(
                        new
                        {
                            Numero = "4974 0185 0223 9888",
                            CompteCarteId = "HNTB 0001 2000 1112 9400"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 0457",
                            CompteCarteId = "HNTB 0003 2005 1112 9430"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 0952",
                            CompteCarteId = "HNTB 0003 2005 1112 9430"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 8476",
                            CompteCarteId = "HNTB 0005 2014 1212 9412"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 8666",
                            CompteCarteId = "HNTB 0005 2014 1212 9412"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 7411",
                            CompteCarteId = "HNTB 0007 2022 1212 9210"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 4814",
                            CompteCarteId = "HNTB 0009 1999 0416 9350"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 7320",
                            CompteCarteId = "HNTB 0002 1999 0416 9412"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 5142",
                            CompteCarteId = "HNTB 0004 2020 0215 9350"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 7874",
                            CompteCarteId = "HNTB 0004 2020 0215 9350"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 6090",
                            CompteCarteId = "HNTB 0006 2021 0315 7500"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 3469",
                            CompteCarteId = "HNTB 0006 2021 0315 7500"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 5720",
                            CompteCarteId = "HNTB 0008 2019 0323 9210"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 2842",
                            CompteCarteId = "HNTB 0008 2019 0323 9210"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 9763",
                            CompteCarteId = "HNTB 0010 2015 0719 7500"
                        },
                        new
                        {
                            Numero = "4974 0185 0223 4871",
                            CompteCarteId = "HNTB 0010 2015 0719 7500"
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseClientId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseClientId");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CompteAdmin", b =>
                {
                    b.Property<string>("Identifiant")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mdp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Identifiant");

                    b.ToTable("ComptesAdmins");

                    b.HasData(
                        new
                        {
                            Identifiant = "a",
                            Mdp = "a"
                        },
                        new
                        {
                            Identifiant = "admin",
                            Mdp = "password"
                        },
                        new
                        {
                            Identifiant = "steeve",
                            Mdp = "assous"
                        },
                        new
                        {
                            Identifiant = "thierry",
                            Mdp = "bossou"
                        },
                        new
                        {
                            Identifiant = "nathaniel",
                            Mdp = "handalena"
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CompteBancaire", b =>
                {
                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOuverture")
                        .HasColumnType("datetime2");

                    b.Property<double>("Solde")
                        .HasColumnType("float");

                    b.HasKey("Numero");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ComptesBancaire");

                    b.HasData(
                        new
                        {
                            Numero = "HNTB 0001 2000 1112 9400",
                            ClientId = 1,
                            DateOuverture = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0003 2005 1112 9430",
                            ClientId = 3,
                            DateOuverture = new DateTime(2005, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0005 2014 1212 9412",
                            ClientId = 5,
                            DateOuverture = new DateTime(2014, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0007 2022 1212 9210",
                            ClientId = 7,
                            DateOuverture = new DateTime(2022, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0009 1999 0416 9350",
                            ClientId = 9,
                            DateOuverture = new DateTime(1999, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0002 1999 0416 9412",
                            ClientId = 2,
                            DateOuverture = new DateTime(1999, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0004 2020 0215 9350",
                            ClientId = 4,
                            DateOuverture = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0006 2021 0315 7500",
                            ClientId = 6,
                            DateOuverture = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0008 2019 0323 9210",
                            ClientId = 8,
                            DateOuverture = new DateTime(2019, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        },
                        new
                        {
                            Numero = "HNTB 0010 2015 0719 7500",
                            ClientId = 10,
                            DateOuverture = new DateTime(2015, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000.0
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.TransactionsHistorique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompteCarteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Devise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MontantOperation")
                        .HasColumnType("float");

                    b.Property<string>("NumeroCarteBancaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOperation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionsHistoriques");
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.ClientParticulier", b =>
                {
                    b.HasBaseType("Projet.BDD.Entities.Console.Client");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ClientParticulier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresseClientId = 1,
                            Mail = "bety@gmail.com",
                            Nom = "BETY",
                            DateNaissance = new DateTime(1985, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Daniel",
                            Sexe = 0
                        },
                        new
                        {
                            Id = 3,
                            AdresseClientId = 3,
                            Mail = "bodin@gmail.com",
                            Nom = "BODIN",
                            DateNaissance = new DateTime(1965, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Justin",
                            Sexe = 0
                        },
                        new
                        {
                            Id = 5,
                            AdresseClientId = 5,
                            Mail = "berris@gmail.com",
                            Nom = "BERRIS",
                            DateNaissance = new DateTime(1977, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Karine",
                            Sexe = 1
                        },
                        new
                        {
                            Id = 7,
                            AdresseClientId = 7,
                            Mail = "abenir@gmail.com",
                            Nom = "ABENIR",
                            DateNaissance = new DateTime(1977, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Alexandra",
                            Sexe = 1
                        },
                        new
                        {
                            Id = 9,
                            AdresseClientId = 9,
                            Mail = "bensaid@gmail.com",
                            Nom = "BENSAID",
                            DateNaissance = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Georgia",
                            Sexe = 1
                        },
                        new
                        {
                            Id = 11,
                            AdresseClientId = 11,
                            Mail = "ababou@gmail.com",
                            Nom = "ABABOU",
                            DateNaissance = new DateTime(1970, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Teddy",
                            Sexe = 0
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.ClientProfessionnel", b =>
                {
                    b.HasBaseType("Projet.BDD.Entities.Console.Client");

                    b.Property<int>("AdresseSiegeId")
                        .HasColumnType("int");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatutJuridique")
                        .HasColumnType("int");

                    b.HasIndex("AdresseSiegeId");

                    b.HasDiscriminator().HasValue("ClientProfessionnel");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AdresseClientId = 2,
                            Mail = "info@axa.fr",
                            Nom = "AXA",
                            AdresseSiegeId = 2,
                            Siret = "12548795641122",
                            StatutJuridique = 0
                        },
                        new
                        {
                            Id = 4,
                            AdresseClientId = 4,
                            Mail = "info@paul.fr",
                            Nom = "PAUL",
                            AdresseSiegeId = 12,
                            Siret = "87459564455444",
                            StatutJuridique = 3
                        },
                        new
                        {
                            Id = 6,
                            AdresseClientId = 6,
                            Mail = "contact@primark.fr",
                            Nom = "PRIMARK",
                            AdresseSiegeId = 6,
                            Siret = "08755897458455",
                            StatutJuridique = 0
                        },
                        new
                        {
                            Id = 8,
                            AdresseClientId = 8,
                            Mail = "info@zara.fr",
                            Nom = "ZARA",
                            AdresseSiegeId = 13,
                            Siret = "65895874587854",
                            StatutJuridique = 1
                        },
                        new
                        {
                            Id = 10,
                            AdresseClientId = 10,
                            Mail = "contact@leonidas.fr",
                            Nom = "LEONIDAS",
                            AdresseSiegeId = 14,
                            Siret = "91235987456832",
                            StatutJuridique = 2
                        });
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CarteBancaire", b =>
                {
                    b.HasOne("Projet.BDD.Entities.Console.CompteBancaire", "CompteCarte")
                        .WithMany("CartesBancaire")
                        .HasForeignKey("CompteCarteId");

                    b.Navigation("CompteCarte");
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.Client", b =>
                {
                    b.HasOne("Projet.BDD.Entities.Console.Adresse", "AdresseClient")
                        .WithMany()
                        .HasForeignKey("AdresseClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdresseClient");
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CompteBancaire", b =>
                {
                    b.HasOne("Projet.BDD.Entities.Console.Client", "Titulaire")
                        .WithOne("CompteBancaire")
                        .HasForeignKey("Projet.BDD.Entities.Console.CompteBancaire", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Titulaire");
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.ClientProfessionnel", b =>
                {
                    b.HasOne("Projet.BDD.Entities.Console.Adresse", "AdresseSiege")
                        .WithMany()
                        .HasForeignKey("AdresseSiegeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdresseSiege");
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.Client", b =>
                {
                    b.Navigation("CompteBancaire")
                        .IsRequired();
                });

            modelBuilder.Entity("Projet.BDD.Entities.Console.CompteBancaire", b =>
                {
                    b.Navigation("CartesBancaire");
                });
#pragma warning restore 612, 618
        }
    }
}
